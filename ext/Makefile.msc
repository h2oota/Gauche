# compile dirs
top_srcdir   = d:/src/Gauche
top_builddir = $(top_srcdir)
srcdir=$(top_srcdir)/ext/$(DIR)

makefile=$(top_srcdir)/ext/makefile.msc

!include "$(top_srcdir)/config.mk"

# gauche vers
GAUCHE_VERSION = 0.9.5_pre1
GAUCHE_ABI_VERSION = 0.9


GOSH           = $(top_builddir)/src/gosh -ftest
GAUCHE_CONFIG  = $(top_builddir)/src/gauche-config
GAUCHE_INSTALL = $(GOSH:/=\) $(top_srcdir)/src/gauche-install.in -C
PRECOMP        = $(GOSH:/=\) $(top_srcdir)/src/precomp

SUBDIRS=gauche.dir util.dir data.dir srfi.dir uvector.dir threads.dir \
	charconv.dir binary.dir net.dir termios.dir fcntl.dir file.dir \
	sxml.dir syslog.dir dbm.dir mt-random.dir bcrypt.dir digest.dir \
	vport.dir text.dir zlib.dir sparse.dir peg.dir windows.dir tls.dir
SUBDIRS=gauche.dir util.dir data.dir srfi.dir uvector.dir threads.dir \
	charconv.dir binary.dir net.dir termios.dir fcntl.dir file.dir \
	sxml.dir syslog.dir dbm.dir mt-random.dir bcrypt.dir digest.dir \
	vport.dir text.dir rfc.dir zlib.dir sparse.dir peg.dir windows.dir tls.dir

TEMPLATES = template.Makefile.in template.configure template.configure.ac \
	    template.extension.h template.extension.c \
	    template.extensionlib.stub template.module.scm \
	    template.test.scm

TEMPLATE_INST_DIR = $(datadir)/gauche-0.9/$(GAUCHE_VERSION)
GAUCHE_INCDIR = $(gauche_incdir)
GAUCHE_LIBDIR = $(gauche_libdir)
GAUCHE_ARCHDIR= $(gauche_archdir)

all: $(SUBDIRS:.dir=.bld)

# test : check


INCS=	-I. -I$(top_srcdir)/ext -I$(top_srcdir)/src -I$(top_builddir)/src

DEFS=	-DHAVE_CONFIG_H  -DUNICODE -D_UNICODE -DMSVC
DEFS=	$(DEFS) -DGAUCHE_WINDOWS -DGAUCHE_ARCH="\"$(arch)\""
DEFS=	$(DEFS) -DGC_NOT_DLL
DEFS=	$(DEFS) -DLIBGAUCHE="\"libgauche-$(GAUCHE_ABI_VERSION).dll\""

CC=	cl -nologo
CFLAGS=	-MD -WX $(INCS) $(DEFS) $(CDEBUG) $(COPT)

clean: $(SUBDIRS:.dir=.clean)

$(SUBDIRS:.dir=.bld):
	@if exist $(@B)/subdir.mk \
	    cd $(top_srcdir)/ext/$(@B) && $(MAKE) -nologo -f $(makefile) subdir DIR=$(@B) ACTION="extension link test"

install: $(SUBDIRS:.dir=.inst) "$(TEMPLATE_INST_DIR)"
	@echo ++++ installing templates
	@for %%f in ($(TEMPLATES)) do @copy /y %%f "$(TEMPLATE_INST_DIR:/=\)"

"$(TEMPLATE_INST_DIR)":
	mkdir $(@:/=\)

$(SUBDIRS:.dir=.inst):
	@if exist $(@B)/subdir.mk \
	   cd $(top_srcdir)/ext/$(@B) && echo ++++ installing $(@B) && $(MAKE) -nologo -f $(makefile) subdir DIR=$(@B) ACTION="install-extension"

$(SUBDIRS:.dir=.clean):
	@if exist $(@B)/subdir.mk cd $(top_srcdir)/ext/$(@B) && $(MAKE) -nologo -f $(makefile) subdir DIR=$(@B) ACTION="clean-ext unlink"

subdir: 
	@$(MAKE) -nologo -f $(makefile) $(ACTION) DIR=$(DIR)

.scm.c:
	$(PRECOMP) $(srcdir)/$(@B).scm

.stub.c :
	$(GOSH:/=\) $(top_srcdir)/src/genstub $(@B).stub

.SUFFIXES: .scm .stub

# extension dependencies
uvector.bld: data.bld util.bld
gauche.bld srfi.bld: util.bld uvector.bld
gauche.bld: mt-random.bld
charconv.bld net.bld: gauche.bld srfi.bld
text.bld: uvector.bld charconv.bld
threads.bld bcrypt.bld sxml.bld vport.bld \
  mt-random.bld digest.bld zlib.bld termios.bld windows.bld: uvector.bld
tls.bld: vport.bld
bcrypt.bld: mt-random.bld
dbm.bld : threads.bld
rfc.bld: gauche.bld util.bld

!if "$(DIR)" != ""
!include "$(top_srcdir)/ext/$(DIR)/subdir.mk"
!endif


# srfi does not have a SCM_CATEGORY. 
!if "$(LIBFILES)" != "" # defined in subdir
#!if "$(SCM_CATEGORY)" == ""
#!error SCM_CATEGORY not defined in $(DIR).
#!endif

extension: extension-msg $(LIBFILES) $(EXTENTION_AUXS)
extension-msg:
	@echo entering $(DIR)...
clean:

$(LIBFILES):
	link -dll -out:$@ -manifest $** $(top_srcdir)/src/libgauche-$(GAUCHE_ABI_VERSION).lib $(LDEBUG) -incremental:no
	mt -nologo -manifest $@.manifest -outputresource:$@;#2

$(LIBFILES:.dll=.c):
	@$(MAKE) -nologo -f $(makefile) precompile-scm OUT=$(@B)

clean-ext:
	del /q $(LIBFILES)
!if "$(XCLEANFILES)" != ""
	del /q $(XCLEANFILES:/=\)
!endif
	del /q $(LIBFILES:.dll=.dll.manifest)
	del /q $(LIBFILES:.dll=.exp)
	del /q $(LIBFILES:.dll=.lib)
	del /q $(LIBFILES:.dll=.pdb)
	@if exist test.done del /q test.done

test: $(LIBFILES)
!if exist(test.scm)
!if exist(test.done)
	@echo test skipped.
!else
	$(GOSH:/=\) -I . test.scm
	touch test.done
!endif
!endif

link: $(LIBFILES)
	-$(GOSH:/=\) $(top_srcdir)/ext/xlink -l -g "$(SCM_CATEGORY)" \
	  -b $(top_builddir) -s $(srcdir) $(LIBFILES) $(SCMFILES) $(LIBFILES:.dll=.pdb)

unlink:
	-$(GOSH:/=\) $(top_srcdir)/ext/xlink -u -g "$(SCM_CATEGORY)" \
	  -b $(top_builddir) -s $(srcdir) $(LIBFILES) $(SCMFILES) $(LIBFILES:.dll=.pdb)

INSTALL_DIRS=	"$(GAUCHE_INCDIR)" \
		"$(GAUCHE_LIBDIR)/$(SCM_CATEGORY)" \
		"$(GAUCHE_ARCHDIR)"
install-extension: $(INSTALL_DIRS)
	@for %%f in ($(HDRFILES:/=\)) do @copy /y %%f "$(GAUCHE_INCDIR:/=\)" || exit 1
	@for %%f in ($(LIBFILES) $(LIBFILES:.dll=.pdb)) do @if exist %%f copy /y %%f "$(GAUCHE_ARCHDIR:/=\)" || exit 1
	@for %%f in ($(SCMFILES:/=\)) do @copy /y %%f "$(GAUCHE_LIBDIR:/=\)\$(SCM_CATEGORY:/=\)" || exit 1

$(INSTALL_DIRS):
	@if not exist $(@:/=\) mkdir $(@:/=\)

SRC_SCM=$(top_srcdir)/libsrc/$(OUT:--=/).scm
precompile-scm:
	@<<precompile-scm.bat $(SRC_SCM:/=\) 
@echo off
setlocal
set SRC_SCM=$(SRC_SCM)
if exist %~n1.scm set SRC_SCM=%~n1.scm
echo $(GOSH:/=\) $(top_srcdir)/src/precomp -e -P -o $(OUT) %SRC_SCM%
$(GOSH:/=\) $(top_srcdir)/src/precomp -e -P -o $(OUT) %SRC_SCM%
<<

!endif #LIBFILES
